// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calculate_mi_and_omes
NumericVector calculate_mi_and_omes(int i, int j, NumericVector P2, NumericMatrix P1, int q, int N);
RcppExport SEXP _CMA_calculate_mi_and_omes(SEXP iSEXP, SEXP jSEXP, SEXP P2SEXP, SEXP P1SEXP, SEXP qSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type P2(P2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P1(P1SEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_mi_and_omes(i, j, P2, P1, q, N));
    return rcpp_result_gen;
END_RCPP
}
// Compute_C
NumericMatrix Compute_C(NumericVector Pij, NumericMatrix Pi, int N, int q);
RcppExport SEXP _CMA_Compute_C(SEXP PijSEXP, SEXP PiSEXP, SEXP NSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Pij(PijSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(Compute_C(Pij, Pi, N, q));
    return rcpp_result_gen;
END_RCPP
}
// hammingdist
NumericMatrix hammingdist(NumericMatrix X);
RcppExport SEXP _CMA_hammingdist(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(hammingdist(X));
    return rcpp_result_gen;
END_RCPP
}
// AccPi_true
NumericMatrix AccPi_true(NumericMatrix align, NumericVector W, int N, int q, int M);
RcppExport SEXP _CMA_AccPi_true(SEXP alignSEXP, SEXP WSEXP, SEXP NSEXP, SEXP qSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type align(alignSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(AccPi_true(align, W, N, q, M));
    return rcpp_result_gen;
END_RCPP
}
// AccPij_true
NumericVector AccPij_true(NumericMatrix align, NumericVector W, int N, int q, int M);
RcppExport SEXP _CMA_AccPij_true(SEXP alignSEXP, SEXP WSEXP, SEXP NSEXP, SEXP qSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type align(alignSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(AccPij_true(align, W, N, q, M));
    return rcpp_result_gen;
END_RCPP
}
// arrayC
NumericVector arrayC(NumericVector input, IntegerVector dim);
RcppExport SEXP _CMA_arrayC(SEXP inputSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(arrayC(input, dim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CMA_calculate_mi_and_omes", (DL_FUNC) &_CMA_calculate_mi_and_omes, 6},
    {"_CMA_Compute_C", (DL_FUNC) &_CMA_Compute_C, 4},
    {"_CMA_hammingdist", (DL_FUNC) &_CMA_hammingdist, 1},
    {"_CMA_AccPi_true", (DL_FUNC) &_CMA_AccPi_true, 5},
    {"_CMA_AccPij_true", (DL_FUNC) &_CMA_AccPij_true, 5},
    {"_CMA_arrayC", (DL_FUNC) &_CMA_arrayC, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CMA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
