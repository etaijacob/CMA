// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calculate_mi_and_omes
NumericVector calculate_mi_and_omes(int i, int j, NumericVector P2, NumericMatrix P1, int q, int N);
RcppExport SEXP CMA_calculate_mi_and_omes(SEXP iSEXP, SEXP jSEXP, SEXP P2SEXP, SEXP P1SEXP, SEXP qSEXP, SEXP NSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type i(iSEXP );
        Rcpp::traits::input_parameter< int >::type j(jSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type P2(P2SEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type P1(P1SEXP );
        Rcpp::traits::input_parameter< int >::type q(qSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        NumericVector __result = calculate_mi_and_omes(i, j, P2, P1, q, N);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Compute_C
NumericMatrix Compute_C(NumericVector Pij, NumericMatrix Pi, int N, int q);
RcppExport SEXP CMA_Compute_C(SEXP PijSEXP, SEXP PiSEXP, SEXP NSEXP, SEXP qSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type Pij(PijSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        Rcpp::traits::input_parameter< int >::type q(qSEXP );
        NumericMatrix __result = Compute_C(Pij, Pi, N, q);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// hammingdist
NumericMatrix hammingdist(NumericMatrix X);
RcppExport SEXP CMA_hammingdist(SEXP XSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP );
        NumericMatrix __result = hammingdist(X);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// AccPi_true
NumericMatrix AccPi_true(NumericMatrix align, NumericVector W, int N, int q, int M);
RcppExport SEXP CMA_AccPi_true(SEXP alignSEXP, SEXP WSEXP, SEXP NSEXP, SEXP qSEXP, SEXP MSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type align(alignSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        Rcpp::traits::input_parameter< int >::type q(qSEXP );
        Rcpp::traits::input_parameter< int >::type M(MSEXP );
        NumericMatrix __result = AccPi_true(align, W, N, q, M);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// AccPij_true
NumericVector AccPij_true(NumericMatrix align, NumericVector W, int N, int q, int M);
RcppExport SEXP CMA_AccPij_true(SEXP alignSEXP, SEXP WSEXP, SEXP NSEXP, SEXP qSEXP, SEXP MSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type align(alignSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type W(WSEXP );
        Rcpp::traits::input_parameter< int >::type N(NSEXP );
        Rcpp::traits::input_parameter< int >::type q(qSEXP );
        Rcpp::traits::input_parameter< int >::type M(MSEXP );
        NumericVector __result = AccPij_true(align, W, N, q, M);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayC
NumericVector arrayC(NumericVector input, IntegerVector dim);
RcppExport SEXP CMA_arrayC(SEXP inputSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type dim(dimSEXP );
        NumericVector __result = arrayC(input, dim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
